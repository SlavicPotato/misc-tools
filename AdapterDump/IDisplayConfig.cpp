#include "pch.h"

IDisplayConfig::IDisplayConfig(HMONITOR hMonitor)
    :m_hMonitor(hMonitor)
{
    MONITORINFOEXW info;
    info.cbSize = sizeof(info);
    ThrowIfFailed3(GetMonitorInfoW(hMonitor, &info));

    UINT32 requiredPaths, requiredModes;
    ThrowIfFailed2(GetDisplayConfigBufferSizes(QDC_ONLY_ACTIVE_PATHS, &requiredPaths, &requiredModes));
    std::vector<DISPLAYCONFIG_PATH_INFO> paths(requiredPaths);
    std::vector<DISPLAYCONFIG_MODE_INFO> modes(requiredModes);
    ThrowIfFailed2(QueryDisplayConfig(QDC_ONLY_ACTIVE_PATHS, &requiredPaths, paths.data(), &requiredModes, modes.data(), nullptr));

    for (auto& p : paths)
    {
        DISPLAYCONFIG_SOURCE_DEVICE_NAME sourceName;
        sourceName.header.type = DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME;
        sourceName.header.size = sizeof(sourceName);
        sourceName.header.adapterId = p.sourceInfo.adapterId;
        sourceName.header.id = p.sourceInfo.id;
        ThrowIfFailed2(DisplayConfigGetDeviceInfo(&sourceName.header));

        if (wcscmp(info.szDevice, sourceName.viewGdiDeviceName) == 0) {            
            m_targetInfo = p.targetInfo;
            return;
        }
    }

    throw Exceptions::hexception(ERROR_FILE_NOT_FOUND, __LINE__, __FILE__);
}

void IDisplayConfig::GetTargetInfo(DISPLAYCONFIG_PATH_TARGET_INFO& out) const noexcept
{
    out = m_targetInfo;
}

bool IDisplayConfig::GetMonitorName(std::wstring& out) const noexcept
{
    DISPLAYCONFIG_TARGET_DEVICE_NAME name;
    name.header.type = DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME;
    name.header.size = sizeof(name);
    name.header.adapterId = m_targetInfo.adapterId;
    name.header.id = m_targetInfo.id;

    if (DisplayConfigGetDeviceInfo(&name.header) != ERROR_SUCCESS) {
        return false;
    }

    out = name.monitorFriendlyDeviceName;
    return true;

}

const char* IDisplayConfig::GetOutputTechName(DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY vo) noexcept
{
    switch (vo)
    {
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL);
    case DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL:
        return STR(DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL);
    }

    return "Unknown";
}

const char* IDisplayConfig::GetScalingName(DISPLAYCONFIG_SCALING s) noexcept
{
    switch (s) {
    case DISPLAYCONFIG_SCALING_IDENTITY:
        return STR(DISPLAYCONFIG_SCALING_IDENTITY);
    case DISPLAYCONFIG_SCALING_CENTERED:
        return STR(DISPLAYCONFIG_SCALING_CENTERED);
    case DISPLAYCONFIG_SCALING_STRETCHED:
        return STR(DISPLAYCONFIG_SCALING_STRETCHED);
    case DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX:
        return STR(DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX);
    case DISPLAYCONFIG_SCALING_CUSTOM:
        return STR(DISPLAYCONFIG_SCALING_CUSTOM);
    case DISPLAYCONFIG_SCALING_PREFERRED:
        return STR(DISPLAYCONFIG_SCALING_PREFERRED);
    }

    return "UNKNOWN";
}

const char* IDisplayConfig::GetScanlineOrderingName(DISPLAYCONFIG_SCANLINE_ORDERING so) noexcept
{
    switch (so) {
    case DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED:
        return STR(DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED);
    case DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE:
        return STR(DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE);
    case DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED:
        return STR(DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED);
    case DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST:
        return STR(DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST);
    }

    return "UNKNOWN";
}

const char* IDisplayConfig::GetRotationName(DISPLAYCONFIG_ROTATION r) noexcept
{
    switch (r) {
    case DISPLAYCONFIG_ROTATION_IDENTITY:
        return STR(DISPLAYCONFIG_ROTATION_IDENTITY);
    case DISPLAYCONFIG_ROTATION_ROTATE90:
        return STR(DISPLAYCONFIG_ROTATION_ROTATE90);
    case DISPLAYCONFIG_ROTATION_ROTATE180:
        return STR(DISPLAYCONFIG_ROTATION_ROTATE180);
    case DISPLAYCONFIG_ROTATION_ROTATE270:
        return STR(DISPLAYCONFIG_ROTATION_ROTATE270);
    }

    return "UNKNOWN";
}